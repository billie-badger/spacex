{"version":3,"sources":["SpaceX-Logo.png","loadingrocket.gif","components/LaunchItem.js","components/MissionKey.js","components/Launches.js","components/Launch.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","LaunchItem","_ref","_ref$launch","launch","flight_number","mission_name","launch_date_local","launch_success","react_default","a","createElement","className","classNames","text-success","text-danger","dist_default","format","Link","to","concat","MissionKey","LAUNCHES_QUERY","gql","_templateObject","Launches","_Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","react","style","textAlign","react_apollo_browser_umd","query","loading","error","data","src","loadingrocket","alt","display","margin","console","log","launches","map","Component","LAUNCH_QUERY","Launch_templateObject","Launch","props","match","params","parseInt","variables","_data$launch","launch_year","_data$launch$rocket","rocket","rocket_id","rocket_name","rocket_type","float","client","ApolloClient","uri","App","BrowserRouter","logo","width","padding","Route","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ffc2ce2a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/SpaceX-Logo.65d0543c.png\";","module.exports = __webpack_public_path__ + \"static/media/loadingrocket.019be322.gif\";","import React from 'react'\nimport classNames from 'classnames'\nimport Moment from 'react-moment'\nimport { Link } from 'react-router-dom'\n\nexport default function LaunchItem({ launch: { flight_number, mission_name, launch_date_local, launch_success }}) {\n  return (\n    <div className='card card-body mb-3'>\n      <div className=\"row\">\n        <div className=\"col-md-9\">\n          <h4>Mission:{'\\u00A0'} \n            <span \n              className={classNames({ \n                'text-success' : launch_success,\n                'text-danger' : !launch_success \n              })}>{ mission_name }\n            </span>\n          </h4>\n          <p>Date: <Moment format=\"YYYY-MM-DD HH:mm\">{ launch_date_local }</Moment></p>\n        </div>\n        <div className=\"col-md-3\">\n          <Link to={ `/launch/${flight_number}` } className=\"btn btn-secondary\">Launch Details</Link>\n        </div>\n      </div> \n    </div>\n  )\n}\n","import React from 'react'\n\nexport default function MissionKey() {\n  return (\n    <div className='my-3'>\n      <p>\n        <span className=\"px-3 mr-2 ml-1 bg-success\" /> = Success\n      </p>\n      <p>\n        <span className=\"px-3 mr-2 ml-1 bg-danger\" /> = Failure\n      </p>\n    </div>\n  )\n}\n","import React, { Component, Fragment } from 'react'\nimport gql from 'graphql-tag'\nimport { Query } from 'react-apollo'\nimport loadingrocket from '../loadingrocket.gif'\nimport LaunchItem from './LaunchItem'\nimport MissionKey from './MissionKey'\n\nconst LAUNCHES_QUERY = gql`\n  query LAUNCHES_QUERY {\n    launches {\n      flight_number\n      mission_name\n      launch_date_local\n      launch_success\n    }\n  }\n`\n\nexport class Launches extends Component {\n  render() {\n    return (\n      <Fragment>\n        <h1 className=\"display-4 my-3\" style={{ textAlign: \"center\" }}>Launches</h1>\n        <MissionKey />\n        <Query query={LAUNCHES_QUERY}>\n          {\n            ({ loading, error, data }) => {\n              if(loading) return <img src={loadingrocket} alt=\"loading-rocket\" style={{ display: \"block\", margin: \"auto\" }}/>\n              if(error) console.log(error)\n              \n              return  <Fragment>\n                {\n                  data.launches.map(launch => {\n                    return <LaunchItem key={launch.flight_number} launch={launch} />\n                  })\n                }\n              </Fragment>\n\n            }\n          }\n        </Query>\n      </Fragment>\n    )\n  }\n}\n\nexport default Launches\n","import React, { Component, Fragment } from 'react'\nimport gql from 'graphql-tag'\nimport { Query } from 'react-apollo'\nimport { Link } from 'react-router-dom'\nimport classNames from 'classnames'\nimport Moment from 'react-moment'\n\nconst LAUNCH_QUERY = gql`\n  query LAUNCH_QUERY($flight_number: Int!) {\n    launch(flight_number: $flight_number) {\n      flight_number\n      mission_name\n      launch_year\n      launch_success\n      launch_date_local\n      rocket {\n        rocket_id\n        rocket_name\n        rocket_type\n      }\n    }\n  }\n`\n\nexport class Launch extends Component {\n  render() {\n    let { flight_number } = this.props.match.params\n    flight_number = parseInt(flight_number)\n     return (\n      <Fragment>\n        <Query query={LAUNCH_QUERY} variables={{ flight_number }}>\n          {\n            ({ loading, error, data }) => {\n              if(loading) return <h4>Loading...</h4>\n              if(error) console.log(error)\n\n              const { mission_name, flight_number, launch_year, launch_success, launch_date_local, rocket: { rocket_id, rocket_name, rocket_type } } = data.launch\n\n              return (\n                <div>\n                  <Link to=\"/\" style={{ float: \"right\" }} className='btn btn-info my-3'>Back</Link>\n                  <h1 className=\"display-4 my-3\"><span className='text-light'>Mission:</span> {mission_name}</h1>\n                  <h4 className=\"mb-3\">Launch Details</h4>\n                  <ul className=\"list-group\">\n                    <li className=\"list-group-item\">Flight Number: {flight_number}</li>\n                    <li className=\"list-group-item\">Launch Year: {launch_year}</li>\n                    <li className=\"list-group-item\">Launch Date / Time: <Moment format=\"YYYY-MM-DD HH:mm\">{ launch_date_local }</Moment></li>\n                    <li \n                      className=\"list-group-item\">\n                      Launch Successful: \n                        <span \n                          className={classNames({ \n                            'text-success' : launch_success, \n                            'text-danger' : !launch_success \n                          })}>\n                          {launch_success ? ' Yes' : ' No'}\n                        </span>\n                    </li>\n                  </ul>\n                  <h4 className=\"my-3\">Rocket Details</h4>\n                  <ul className=\"list-group\">\n                    <li className=\"list-group-item\">Rocket ID: {rocket_id}</li>\n                    <li className=\"list-group-item\">Rocket Name: {rocket_name}</li>\n                    <li className=\"list-group-item\">Rocket Type: {rocket_type}</li>\n                  </ul>\n                  <hr />\n                  \n                </div>\n              )\n            }\n          }\n        </Query>\n      </Fragment>\n    )\n  }\n}\n\nexport default Launch\n","import React, { Component } from 'react';\nimport ApolloClient from 'apollo-boost'\nimport { ApolloProvider } from 'react-apollo'\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\nimport './App.css';\nimport logo from './SpaceX-Logo.png'\nimport Launches from './components/Launches';\nimport Launch from './components/Launch'\n\nconst client = new ApolloClient({\n  uri: '/graphql'\n})\n\nclass App extends Component {\n  render() {\n    return (\n      <ApolloProvider client={client}>\n      <Router>\n        <div className=\"container\">\n          <img src={logo} alt=\"SpaceX\" style={{ display: \"block\", width: \"1000px\", margin: \"auto\", padding: \"2em\" }}/>\n          <Route exact path=\"/\" component={Launches}></Route>\n          <Route exact path='/launch/:flight_number' component={Launch}></Route>\n        </div>\n      </Router>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}